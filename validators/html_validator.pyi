from html.parser import HTMLParser
from typing import List, Dict, Tuple, Set

from dodona.translator import Translator
from exceptions.html_exceptions import Warnings, HtmlValidationError, MissingRecommendedAttributesWarning
from validators.double_chars_validator import DoubleCharsValidator


class HtmlValidator(HTMLParser):
    translator: Translator
    warnings: Warnings
    tag_stack: List
    double_chars_validator: DoubleCharsValidator
    valid_dict: Dict
    check_required: bool
    check_recommended: bool
    check_nesting: bool
    _id_set: Set[str]

    def __init__(self, translator: Translator, **kwargs): ...

    def set_check_required(self, b: bool): ...

    def set_check_recommended(self, b: bool): ...

    def set_check_nesting(self, b: bool): ...


    def error(self, error: HtmlValidationError): ...

    def warning(self, warning: MissingRecommendedAttributesWarning): ...

    def validate_file(self, source_filepath: str): ...

    def validate_content(self, content: str): ...

    def _validate(self, text: str): ...

    def _valid_double_chars(self, text): ...

    def handle_starttag(self, tag, attributes: List[Tuple[str, str]]): ...

    def handle_endtag(self, tag: str): ...

    def handle_startendtag(self, tag, attrs): ...

    def handle_data(self, data: str): ...

    def _validate_corresponding_tag(self, tag: str): ...

    def _is_void_tag(self, tag: str) -> bool: ...

    def _valid_tag(self, tag: str): ...

    def _valid_attributes(self, tag: str, attributes: Dict[str, str]): ...

    def _valid_nesting(self, tag): ...